function [MOVINGREG] = registerImages2(MOVING,FIXED)
%registerImages  Register grayscale images using auto-generated code from Registration Estimator app.
%  [MOVINGREG] = registerImages(MOVING,FIXED) Register grayscale images
%  MOVING and FIXED using auto-generated code from the Registration
%  Estimator app. The values for all registration parameters were set
%  interactively in the app and result in the registered image stored in the
%  structure array MOVINGREG.

% Auto-generated by registrationEstimator app on 28-Mar-2023
%-----------------------------------------------------------
%registerImages  使用Registration Estimator应用程序自动生成的代码注册灰度图像。
%  [MOVINGREG] = registerImages(MOVING,FIXED) 使用Registration Estimator应用程序自动生成的代码注册灰度图像
%  MOVING和FIXED。在应用程序中交互设置了所有注册参数的值，并将结果存储在结构数组MOVINGREG中。

% 由registrationEstimator应用程序于2023年3月28日自动生成
%-----------------------------------------------------------


% Feature-based techniques require license to Computer Vision Toolbox
checkLicense()

% Default spatial referencing objects
fixedRefObj = imref2d(size(FIXED));
movingRefObj = imref2d(size(MOVING));

% Detect MSER features
fixedPoints = detectMSERFeatures(FIXED,'ThresholdDelta',1.220000,'RegionAreaRange',[13 26163],'MaxAreaVariation',0.881875);
movingPoints = detectMSERFeatures(MOVING,'ThresholdDelta',1.220000,'RegionAreaRange',[13 26163],'MaxAreaVariation',0.881875);

% Extract features
[fixedFeatures,fixedValidPoints] = extractFeatures(FIXED,fixedPoints,'Upright',true);
[movingFeatures,movingValidPoints] = extractFeatures(MOVING,movingPoints,'Upright',true);

% Match features
indexPairs = matchFeatures(fixedFeatures,movingFeatures,'MatchThreshold',32.500000,'MaxRatio',0.325000);
fixedMatchedPoints = fixedValidPoints(indexPairs(:,1));
movingMatchedPoints = movingValidPoints(indexPairs(:,2));
MOVINGREG.FixedMatchedFeatures = fixedMatchedPoints;
MOVINGREG.MovingMatchedFeatures = movingMatchedPoints;

% Apply transformation - Results may not be identical between runs because of the randomized nature of the algorithm
tform = estimateGeometricTransform2D(movingMatchedPoints,fixedMatchedPoints,'affine');
MOVINGREG.Transformation = tform;
MOVINGREG.RegisteredImage = imwarp(MOVING, movingRefObj, tform, 'OutputView', fixedRefObj, 'SmoothEdges', true);

% Store spatial referencing object
MOVINGREG.SpatialRefObj = fixedRefObj;

end

function checkLicense()

% Check for license to Computer Vision Toolbox
CVTStatus = license('test','Video_and_Image_Blockset');
if ~CVTStatus
    error(message('images:imageRegistration:CVTRequired'));
end

end

